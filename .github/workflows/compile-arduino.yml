name: Compile Arduino with Auto-Cleanup

on:
  push:
    paths:
      - 'sketches/**/*.ino'
  repository_dispatch:
    types: [compile-arduino]

jobs:
  compile:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Install Arduino CLI
      run: |
        curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh
        sudo mv bin/arduino-cli /usr/local/bin/arduino-cli
        arduino-cli version
        arduino-cli core update-index
        arduino-cli core install arduino:avr
    
    - name: Clean up old builds
      run: |
        # Remove test builds older than 1 hour
        if [ -d "builds" ]; then
          find builds -name "test_*" -type d -mmin +60 -exec rm -rf {} + 2>/dev/null || true
          
          # Keep only the 10 most recent builds for each sketch
          for sketch_type in $(find builds -maxdepth 1 -type d -name "*" ! -name "builds" | sed 's|builds/||' | grep -v "test_" | sort -u); do
            # Count builds for this sketch type
            count=$(find builds -name "${sketch_type}*" -type d | wc -l)
            if [ $count -gt 10 ]; then
              # Remove oldest ones
              find builds -name "${sketch_type}*" -type d | sort | head -n -10 | xargs rm -rf
            fi
          done
        fi
    
    - name: Compile sketch
      run: |
        mkdir -p builds
        
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          SKETCH_NAME="${{ github.event.client_payload.filename }}"
          echo "Compiling specific sketch: $SKETCH_NAME"
          
          SKETCH_PATH=$(find sketches -name "${SKETCH_NAME}.ino" -type f | head -1)
          
          if [ -z "$SKETCH_PATH" ]; then
            echo "Error: Sketch ${SKETCH_NAME}.ino not found"
            exit 1
          fi
          
          echo "Found sketch at: $SKETCH_PATH"
          SKETCH_DIR=$(dirname "$SKETCH_PATH")
          
          mkdir -p "builds/${SKETCH_NAME}"
          
          arduino-cli compile \
            --fqbn arduino:avr:uno \
            "$SKETCH_DIR" \
            --output-dir "builds/${SKETCH_NAME}" \
            --export-binaries \
            --verbose
          
          if [ -f "builds/${SKETCH_NAME}/${SKETCH_NAME}.ino.hex" ]; then
            cp "builds/${SKETCH_NAME}/${SKETCH_NAME}.ino.hex" "builds/${SKETCH_NAME}/${SKETCH_NAME}.hex"
            echo "Created: builds/${SKETCH_NAME}/${SKETCH_NAME}.hex"
          fi
        fi
        
        echo "Generated hex files:"
        find builds -name "*.hex" -type f | head -20
    
    - name: Commit compiled files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Pull and rebase to get latest changes
        git pull origin main --rebase --strategy-option=theirs
        
        # Add changes
        git add builds/
        
        # Also stage deletions from cleanup
        git add -A builds/
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Compiled ${{ github.event.client_payload.filename || 'sketches' }} [skip ci]"
          
          # Push with retry
          for i in {1..5}; do
            if git push origin main; then
              echo "Successfully pushed"
              break
            else
              echo "Push attempt $i failed, pulling and retrying..."
              git pull origin main --rebase --strategy-option=theirs
              sleep $((i * 2))
            fi
          done
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hex-files-${{ github.run_number }}
        path: builds/**/*.hex
        retention-days: 1
